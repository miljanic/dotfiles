" vim: set ft=vim: syntax=vim
" Use exclude option if you don't want the full Layer,
" e.g., Layer 'better-defaults', { 'exclude': 'itchyny/vim-cursorword' }
function! Layers()
	let g:spacevim_lsp_engine = 'coc'

	Layer 'airline'
	Layer 'better-defaults', {'exclude': [
				\ 'kshenoy/vim-signature',
				\ 'google/vim-searchindex',
				\ 'mhinz/vim-startify',
				\ ] }
	" Layer 'deoplete', {'exclude': [
	"       \ 'eagletmt/neco-ghc',
	"       \ 'sebastianmarkow/deoplete-rust',
	"       \ 'zchee/deoplete-go',
	"       \ ]}
	Layer 'docker'
	Layer 'editing'
	Layer 'fzf'
	Layer 'git'
	Layer 'lsp'
	Layer 'markdown'
	Layer 'programming', {'exclude': ['luochen1990/rainbow', 'jiangmiao/auto-pairs']}
	Layer 'unite'
	Layer 'syntax-checking'

endfunction

function! UserInit()

	Plug 'andymass/vim-matchup'
	Plug 'tpope/vim-repeat'
	Plug 'pappasam/coc-jedi', { 'do': 'yarn install --frozen-lockfile && yarn build' }
	Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }
	" Plug 'zchee/deoplete-jedi', { 'for': 'python' }
	" Plug 'davidhalter/jedi-vim', { 'for': 'python' }
	Plug 'chr4/nginx.vim'
	Plug 'Firef0x/PKGBUILD.vim'
	Plug 'elzr/vim-json', { 'for': 'json' }
	Plug 'jeetsukumaran/vim-pythonsense', { 'for': 'python' }
	Plug 'elixir-editors/vim-elixir'
	Plug 'hashivim/vim-terraform'
	Plug 'morhetz/gruvbox'
	Plug 'preservim/nerdtree'
	Plug 'mbbill/undotree'
	Plug 'integralist/vim-mypy'

endfunction

" Override the existing configurations and add extras here.
function! UserConfig()

	set termguicolors
	color gruvbox
	set encoding=utf8
	set shell=/bin/bash
	set autochdir
	set laststatus=2
	"set timeoutlen=300
	"set backspace=2
	set showcmd
	set wrap
	set linebreak
	set number
	set relativenumber
	set cursorline
	set cursorcolumn
	set tabstop=4
	set shiftwidth=4
	set softtabstop=4
	set textwidth=0
	set noexpandtab
	set autoindent
	set background=dark
	set list
	set listchars=tab:â”‚\ ,trail:~,extends:>,precedes:<
	set splitright
	set splitbelow
	set foldmethod=indent

	" Persistent undo
	set undofile
	set undodir=~/.local/share/nvim/undodir

	" Set default LICENSE
	let g:license = 'BSD 3-Clause'
	let g:email = 'pavle.portic@tilda.center'

	" Set python path
	let g:python_host_prog = '/usr/bin/python'

	" Disable default space action
	noremap <Space> <NOP>

	" Autoindent code
	nmap <F7> mzgg=G`z

	" Buffer actions
	nnoremap <silent> <Tab> :bn<CR>
	nnoremap <silent> <S-Tab> :bp<CR>
	nnoremap <silent> <leader>bd :bp \| bd #<cr>

	" Unhighlight search results with \
	noremap <silent> \ :let @/ = ""<CR>

	if !exists('g:vim_better_default_window_key_mapping') || g:vim_better_default_window_key_mapping
		nnoremap <Leader>w<Down> <C-W>j
		nnoremap <Leader>w<Up> <C-W>k
		nnoremap <Leader>w<Left> <C-W>h
		nnoremap <Leader>w<Right> <C-W>l
		nnoremap <Leader>w<S-Left> <C-W>5<
		nnoremap <Leader>w<S-Right> <C-W>5>
		" nnoremap <Leader>w<S-Up> :resize +5<CR>
		" nnoremap <Leader>w<S-Down> :resize -5<CR>
	endif

	" FZF mappings
	noremap <C-P> :GFiles<CR>
	noremap <leader>ff :Files<CR>
	noremap <C-G> :Lines<CR>
	noremap <C-Q> :Buffers<CR>
	noremap <C-T> :Tags<CR>
	noremap <leader>? :Maps<CR>

	" Markdown Preview
	nmap <Leader>mp <Plug>MarkdownPreviewToggle

	" Nerdcommenter maps
	nmap <Leader>/ <Plug>NERDCommenterToggle
	vmap <Leader>/ <Plug>NERDCommenterToggle

	" Fugitive maps
	nnoremap <silent> <Leader>gd :Gvdiff<CR>

	" NERDTree maps
	map <Leader>tt :NERDTreeToggle<CR>
	nnoremap <Leader>tf :NERDTreeFocus<CR>

	" Undotree maps
	nnoremap <F3> :UndotreeToggle<cr>

	""""""""""""""""""""""
	" Plugin configuration
	""""""""""""""""""""""

	" Airline settings
	let g:airline_powerline_fonts = 1
	let g:airline_theme='gruvbox'
	let g:airline#extensions#ale#enabled = 1

	" NERDTree settings
	let g:NERDTreeWinPos = "right"

	" Signify settings
	let g:signify_sign_delete_first_line = '-'

	" Emmet settings
	let g:user_emmet_mode='nv'
	let g:user_emmet_leader_key='<Leader>e'

	" LSP configuration
	let g:spacevim_lsp_engine = 'coc'

	" Per filetype indentation settings
	let g:jsx_ext_required = 1
	augroup filetypeDefinitions
		autocmd Filetype i3 setl noet ts=2 sts=2 sw=2
		autocmd Filetype html,jinja.html,blade setl noet ts=2 sts=2 sw=2
		autocmd Filetype javascript,js,vue,jsx setl et ts=4 sts=4 sw=4
		autocmd Filetype json setl et ts=4 sts=4 sw=4
		autocmd Filetype python setl et ts=4 sw=4 sts=4 tw=0
		autocmd Filetype php setl et ts=4 sw=4 sts=4 tw=0
		autocmd Filetype c,cpp setl noet ts=4 sts=4 sw=4
		autocmd Filetype rst setl autoindent& cindent& smartindent& indentexpr& et ts=4 sts=4 sw=4
		autocmd Filetype tex setl et ts=4 sts=4 sw=4
		autocmd Filetype nginx setl noet ts=4 sts=4 sw=4
		autocmd Filetype terraform setl et ts=2 sts=2 sw=2
		autocmd Filetype jsonnet setl et ts=2 sts=2 sw=2
	augroup END

	augroup filetypedetect
		autocmd BufNew,BufNewFile,BufRead *.network,*.netdev :setfiletype systemd
		" autocmd BufNew,BufNewFile,BufRead *.py :set foldlevel=1
	augroup END

	" Don't insert title into new files
	autocmd! spacevimNewFile BufNewFile *.py,*.cpp,*.c,*.sh,*.java,*.pl

	" Format files
	command! FormatJSON %!python -m json.tool
	command! FormatPython %!yapf

	" Format braces in C file
	command! FormatBraces %s/\n\s*{/ {/g

	command! W :execute ':silent w !sudo tee % > /dev/null' | :edit!

	autocmd! spacevimStart

	" Strip trailing whitespaces on save
	fun! <SID>StripTrailingWhitespaces()
		let l = line('.')
		let c = col('.')
		%s/\s\+$//e
		call cursor(l, c)
	endfun
	autocmd FileType * autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

	" Jedi completion settings
	let g:jedi#completions_enabled = 0
	let g:jedi#documentation_command = 'E'

	" Vue syntax highlight speedup
	let g:vue_disable_pre_processors=1

	" JSON disable quote conceal
	let g:vim_json_syntax_conceal = 0

	" Ale settings
	let g:ale_linters = {
		\ 'c': ['gcc'],
		\ 'cpp': ['gcc'],
		\ 'javascript': ['eslint'],
		\ 'python': ['flake8', 'mypy', 'pylint'],
		\ }
	let g:ale_lint_on_insert_leave = 1
	let g:ale_fix_on_save = 1

	" fzf config
	let g:fzf_colors = {
				\ 'fg':      ['fg', 'GruvboxGray'],
				\ 'bg':      ['bg', 'Normal'],
				\ 'hl':      ['fg', 'GruvboxRed'],
				\ 'fg+':     ['fg', 'GruvboxGreen'],
				\ 'bg+':     ['bg', 'GruvboxBg1'],
				\ 'hl+':     ['fg', 'GruvboxRed'],
				\ 'info':    ['fg', 'GruvboxOrange'],
				\ 'prompt':  ['fg', 'GruvboxBlue'],
				\ 'header':  ['fg', 'GruvboxBlue'],
				\ 'pointer': ['fg', 'Error'],
				\ 'marker':  ['fg', 'Error'],
				\ 'spinner': ['fg', 'Statement'],
				\ }

	" Configure vim-template directory
	let g:templates_directory = ['~/.local/share/nvim/templates']

	" NERDCommenter configuration
	let g:NERDCustomDelimiters = { 'vue': { 'left': '//' }, 'systemd': { 'left': '#' } }
	let g:NERDDefaultAlign = 'left'

	" Polyglot configuration
	let g:polyglot_disabled = ['systemd']

endfunction
